{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"cptemplate": {
		"prefix": "cptemplate",
		"body": [
		  "#include<iostream>",
		  "#include<algorithm>",
		  "#include<vector>",
		  "#include<cstdio>",
		  "#include<cstdlib>",
		  "using namespace std;",
		  "",
		  "#define f           first",
		  "#define s           second",
		  "#define pb          push_back",
		  "#define mp          make_pair",
		  "#define all(x)      x.begin(), x.end()",
		  "#define sortall(x)  sort(all(x))",
		  "#define ulli        unsigned long long int",
		  "#define deb(s,x)    cout << s << \" : \" << x << endl",
		  "typedef long long               ll;",
		  "typedef pair<int , int>         pii;",
		  "typedef pair<ll, ll>            pll;",
		  "typedef pair<double, double>    pdd;",
		  "typedef vector<int>             vi;",
		  "typedef vector<pii>             vpii;",
		  "typedef vector<pll>             vpll;",
		  "typedef vector<pdd>             vpdd;",
		  "",
		  "void solve(){",
		  "    ",
		  "}",
		  "",
		  "",
		  "int main(){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(NULL);",
		  "    #ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\", \"r\", stdin) ;",
		  "    freopen(\"output.txt\", \"w\", stdout) ;",
		  "    #endif",
		  "",
		  "    int t;",
		  "    cin >> t;",
		  "    while(t--){",
		  "        solve();",
		  "    }",
		  "",
		  "    return 0;",
		  "",
		  "}",
		  ""
		],
		"description": "cptemplate"
	},

	"fori": {
		"prefix": "fori",
		"body": [
		  "for(int i = 0; i < n; i++){",
		  "    $1",
		  "}"
		],
		"description": "fori"
	},

	"forj": {
		"prefix": "forj",
		"body": [
		  "for(int j = 0; j < n; j++){",
		  "    $1",
		  "}"
		],
		"description": "forj"
	},

	"forij": {
		"prefix": "forij",
		"body": [
		  "for(int i = 0; i < n; i++){",
		  "    $1",
		  "    for(int j = 0; j < n; j++){",
		  "        $2",
		  "    }",
		  "}"
		],
		"description": "forij"
	},

	"forijk": {
		"prefix": "forijk",
		"body": [
		  "for(int i = 0; i < n; i++){",
		  "    $1",
		  "    for(int j = 0; j < n; j++){",
		  "        $2",
		  "        for(int k = 0; k < n; k++){",
		  "            $3",
		  "        } ",
		  "    }",
		  "}"
		],
		"description": "forijk"
	  },

	  "ifelse": {
		"prefix": "ifelse",
		"body": [
		  "if($1){",
		  "    $2",
		  "}",
		  "else{",
		  "    $3",
		  "}"
		],
		"description": "ifelse"
	  },

	  "ifelseif": {
		"prefix": "ifelseif",
		"body": [
		  "if($1){",
		  "    $2",
		  "}",
		  "else if($3){",
		  "    $4",
		  "}",
		  "else{",
		  "    $5",
		  "}"
		],
		"description": "ifelseif"
	},

	"cout": {
		"prefix": "cout",
		"body": [
		  "cout << $1 << endl;"
		],
		"description": "cout"
	},

	"BubbleSort": {
		"prefix": "bubbleSort",
		"body": [
		  "void swap(int *first, int *second){",
		  "    int temp;",
		  "    temp = *first;",
		  "    *first = *second;",
		  "    *second = temp;",
		  "}",
		  "",
		  "void bubbleSort(int arr[], int n){",
		  "",
		  "    int i, j;",
		  "    bool swapped;",
		  "",
		  "    for(i = 0; i < n - 1; i++){",
		  "",
		  "        swapped = false;",
		  "",
		  "        for(int j = 0; j < n - i - 1; j++){",
		  "            if(arr[j] > arr[j + 1]){",
		  "                swap(&arr[j], &arr[j + 1]);",
		  "                swapped = true;",
		  "            }",
		  "        }",
		  "",
		  "        if(swapped == false){",
		  "            break;",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "BubbleSort"
	  },

	  "SieveOfEratosthenes": {
		"prefix": "SieveOfEratosthenes",
		"body": [
		  "void sieveOfEratosthenes(int n){",
		  "",
		  "    bool prime[n + 1];",
		  "    memset(prime, true, sizeof(prime));",
		  "",
		  "    for(int p = 2; p*p <= n; p++){",
		  "        if(prime[p] == true){",
		  "            for(int i = p*p; i <= n; i += p){",
		  "                prime[i] = false;",
		  "            }",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "SieveOfEratosthenes"
	  }

}